<?php

namespace DummyNamespace;

use Illuminate\Http\Request;
use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;
use DummyRootNamespaceHttp\Resources\{{modelName}}Resource;
use DummyRootNamespaceHttp\Resources\{{modelName}}Collection;
use DummyRootNamespace{{modelNamespace}}{{modelName}};

class DummyClass extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $this->authorize('index', {{modelName}}::class);
        $per_page = $request->per_page ?? 25;

        ${{crudName}} = \EloquentBuilder::to({{modelName}}::class, $request->search)
            ->orderBy('id', 'asc')
            ->paginate($per_page);

        return new {{modelName}}Collection(${{crudName}});
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->authorize('store', {{modelName}}::class);
        {{validationRules}}
        ${{crudNameSingular}} = {{modelName}}::create($request->all());

        return response()->json(${{crudNameSingular}}, 201);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show({{modelName}} ${{crudNameSingular}})
    {
        $this->authorize('show', ${{crudNameSingular}});
        return new {{modelName}}Resource(${{crudNameSingular}});
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param  int  $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, {{modelName}} ${{crudNameSingular}})
    {
        $this->authorize('update', ${{crudNameSingular}});
        {{validationRules}}
        ${{crudNameSingular}}->update($request->all());

        return response()->json(${{crudNameSingular}}, 200);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy({{modelName}} ${{crudNameSingular}})
    {
        $this->authorize('destroy', ${{crudNameSingular}});
        ${{crudNameSingular}}->delete();

        return response()->json(null, 204);
    }
}
